****************************************************
Your name		    Xiangyuan Lian
The class name		Intersection simulation/Assignment 1
The date			lianx@uoguelph.ca
****************************************************


************************
Program Description
**************************
 This program implements a basic simulation for an intersection. The four queues
 represent the four routes of north, south, west and east. Cars can go to any
 route based on the first column in the input file. The second column indicates
 the action they will make when they go through the intersection. Usually, cars
 go thorugh the intersection beased on first come first serve. However, when more
 than one car arrive at the intersection, the turn based on Right of Way.

 Please see the exception below:
 1) When two cars arrive aross from each other, the car that will go forward or
    turn right will go first. For example: two cars from north and south respectively.
    If both cars are have same action (forward, turn left or turn right), the car
    heading to south or heading to west have the priority.

************
Compilation
************
 To compile this code:
 run: make test

 To compile the testing program:
 run: make testmain

  Detailed Make options:

  make cppcheck runs the cppcheck option
  make test compiles the main.c program with the library
  make testmain compiles the testQueue.c program with the library
  make doxy creates the doxygen documentation in the docs subdirectory
  make clean removes executable files

****************************
Known Limitations, Issues and Errors
****************************

 make cppcheck error: "resource leak: fp".
 make valgrind -v: no error reported

 Queue Time Complexity:
 creatQueue O(1): malloc a queue structure and sets the function pointer. Constant time.
 enQueue    O(1): insert one node at the back of the queue by using inserBack(). Constant time.
 deQueue    O(1): remove one node front the front of the queue by using pop(). Constant time
 peek       O(1): get the data of the front node by using getFromFront(). Constant time.
 destory    O(n): delete the queue by using deleteList() to go through the whole list node bu node. Proportional.
 isEmpty    O(1): check the queue by looking at the length. Constant time. 
